name: Build macOS App

on:
  push:
    tags:
      - 'desktop-v*'
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    environment: Production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          
      - name: Build macOS packages
        env:
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          MEZMO_API_KEY: ${{ secrets.MEZMO_API_KEY }}
          AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          FORCE_COLOR: ${{ vars.FORCE_COLOR }}
          NO_COLOR: ${{ vars.NO_COLOR }}
        run: |
          pnpm make
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Upload to S3
        env:
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
        run: |
          # Get the version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Upload DMG file (Intel)
          if [ -f apps/desktopProbe/out/make/dmg/x64/*.dmg ]; then
            aws s3 cp apps/desktopProbe/out/make/dmg/x64/*.dmg \
              s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-${VERSION}-x64.dmg
          fi
          
          # Upload DMG file (Apple Silicon)
          if [ -f apps/desktopProbe/out/make/dmg/arm64/*.dmg ]; then
            aws s3 cp apps/desktopProbe/out/make/dmg/arm64/*.dmg \
              s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-${VERSION}-arm64.dmg
          fi
          
          # Upload ZIP file (Intel)
          if [ -f apps/desktopProbe/out/make/zip/darwin/x64/*.zip ]; then
            aws s3 cp apps/desktopProbe/out/make/zip/darwin/x64/*.zip \
              s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-${VERSION}-x64.zip
          fi
          
          # Upload ZIP file (Apple Silicon)
          if [ -f apps/desktopProbe/out/make/zip/darwin/arm64/*.zip ]; then
            aws s3 cp apps/desktopProbe/out/make/zip/darwin/arm64/*.zip \
              s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-${VERSION}-arm64.zip
          fi
          
      - name: Update latest symlinks
        env:
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          
          # Create "latest" versions for easy linking
          
          # Intel DMG
          if aws s3 ls s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-${VERSION}-x64.dmg > /dev/null 2>&1; then
            aws s3 cp s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-${VERSION}-x64.dmg \
              s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-latest-x64.dmg
          fi
          
          # Apple Silicon DMG
          if aws s3 ls s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-${VERSION}-arm64.dmg > /dev/null 2>&1; then
            aws s3 cp s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-${VERSION}-arm64.dmg \
              s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-latest-arm64.dmg
          fi
          
          # Intel ZIP
          if aws s3 ls s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-${VERSION}-x64.zip > /dev/null 2>&1; then
            aws s3 cp s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-${VERSION}-x64.zip \
              s3://${S3_BUCKET_NAME}/releases/macos/x64/first2apply-latest-x64.zip
          fi
          
          # Apple Silicon ZIP
          if aws s3 ls s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-${VERSION}-arm64.zip > /dev/null 2>&1; then
            aws s3 cp s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-${VERSION}-arm64.zip \
              s3://${S3_BUCKET_NAME}/releases/macos/arm64/first2apply-latest-arm64.zip
          fi